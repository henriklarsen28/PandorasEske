/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NewgameRouteImport } from './routes/newgame'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GameGameidRouteImport } from './routes/game/$gameid'
import { Route as GameGamenameIndexRouteImport } from './routes/game/$gamename/index'
import { Route as GameGamenameQuestionRouteImport } from './routes/game/$gamename/question'

const NewgameRoute = NewgameRouteImport.update({
  id: '/newgame',
  path: '/newgame',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGameidRoute = GameGameidRouteImport.update({
  id: '/game/$gameid',
  path: '/game/$gameid',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGamenameIndexRoute = GameGamenameIndexRouteImport.update({
  id: '/game/$gamename/',
  path: '/game/$gamename/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameGamenameQuestionRoute = GameGamenameQuestionRouteImport.update({
  id: '/game/$gamename/question',
  path: '/game/$gamename/question',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/newgame': typeof NewgameRoute
  '/game/$gameid': typeof GameGameidRoute
  '/game/$gamename/question': typeof GameGamenameQuestionRoute
  '/game/$gamename': typeof GameGamenameIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/newgame': typeof NewgameRoute
  '/game/$gameid': typeof GameGameidRoute
  '/game/$gamename/question': typeof GameGamenameQuestionRoute
  '/game/$gamename': typeof GameGamenameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/newgame': typeof NewgameRoute
  '/game/$gameid': typeof GameGameidRoute
  '/game/$gamename/question': typeof GameGamenameQuestionRoute
  '/game/$gamename/': typeof GameGamenameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/newgame'
    | '/game/$gameid'
    | '/game/$gamename/question'
    | '/game/$gamename'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/newgame'
    | '/game/$gameid'
    | '/game/$gamename/question'
    | '/game/$gamename'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/newgame'
    | '/game/$gameid'
    | '/game/$gamename/question'
    | '/game/$gamename/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  NewgameRoute: typeof NewgameRoute
  GameGameidRoute: typeof GameGameidRoute
  GameGamenameQuestionRoute: typeof GameGamenameQuestionRoute
  GameGamenameIndexRoute: typeof GameGamenameIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/newgame': {
      id: '/newgame'
      path: '/newgame'
      fullPath: '/newgame'
      preLoaderRoute: typeof NewgameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gameid': {
      id: '/game/$gameid'
      path: '/game/$gameid'
      fullPath: '/game/$gameid'
      preLoaderRoute: typeof GameGameidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gamename/': {
      id: '/game/$gamename/'
      path: '/game/$gamename'
      fullPath: '/game/$gamename'
      preLoaderRoute: typeof GameGamenameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/$gamename/question': {
      id: '/game/$gamename/question'
      path: '/game/$gamename/question'
      fullPath: '/game/$gamename/question'
      preLoaderRoute: typeof GameGamenameQuestionRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  NewgameRoute: NewgameRoute,
  GameGameidRoute: GameGameidRoute,
  GameGamenameQuestionRoute: GameGamenameQuestionRoute,
  GameGamenameIndexRoute: GameGamenameIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
